{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "77f40a46",
   "metadata": {},
   "source": [
    "BUILD CNN MODEL FOR CLASSIFICATION OF FLOWERS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "d95d4de6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Volume in drive C is OS\n",
      " Volume Serial Number is 08F5-B770\n",
      "\n",
      " Directory of C:\\Users\\aruna\\flowers\n",
      "\n",
      "06-10-2022  19:23    <DIR>          .\n",
      "06-10-2022  21:40    <DIR>          ..\n",
      "06-10-2022  18:10    <DIR>          daisy\n",
      "06-10-2022  18:11    <DIR>          dandelion\n",
      "06-10-2022  19:23       111,871,896 flower1.h5\n",
      "06-10-2022  18:11    <DIR>          rose\n",
      "06-10-2022  18:11    <DIR>          sunflower\n",
      "06-10-2022  18:12    <DIR>          tulip\n",
      "               1 File(s)    111,871,896 bytes\n",
      "               7 Dir(s)  839,051,767,808 bytes free\n"
     ]
    }
   ],
   "source": [
    "ls"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "501807fa",
   "metadata": {},
   "source": [
    "IMAGE AUGMENTATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "a4edd018",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "20538d11",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_datagen=ImageDataGenerator(rescale=1./255,horizontal_flip=True,vertical_flip=True,zoom_range=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "4040343f",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_datagen=ImageDataGenerator(rescale=1./255)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "aaa5322d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 4317 images belonging to 5 classes.\n"
     ]
    }
   ],
   "source": [
    "x_train=train_datagen.flow_from_directory(r\"C:\\Users\\aruna\\flowers\",target_size=(64,64),\n",
    "                                                            class_mode=\"categorical\",batch_size=24)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "6918610f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 4317 images belonging to 5 classes.\n"
     ]
    }
   ],
   "source": [
    "x_test=test_datagen.flow_from_directory(r\"C:\\Users\\aruna\\flowers\",target_size=(64,64),\n",
    "                                                            class_mode=\"categorical\",batch_size=24)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8dc94ad",
   "metadata": {},
   "source": [
    "CREATE MODEL:\n",
    "Add Layers (Convolution,MaxPooling,Flatten,Dense-(Hidden\n",
    "Layers),Output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "46a19865",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "4bad9ce6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Convolution2D,MaxPooling2D,Flatten,Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "e9647383",
   "metadata": {},
   "outputs": [],
   "source": [
    "model=Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "ac8b34fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Convolution2D(32,(3,3),activation=\"relu\",input_shape=(64,64,3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "8ed35ea7",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(MaxPooling2D(pool_size=(2,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "370f47db",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "bc53e311",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(300,activation='relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "520dc991",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(300,activation='relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "c2588e95",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(5,activation=\"softmax\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb916578",
   "metadata": {},
   "source": [
    "COMPILE THE MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "6b877dd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"categorical_crossentropy\",metrics=[\"accuracy\"],optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "bc747bd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "180"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(x_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61101034",
   "metadata": {},
   "source": [
    "FIT THE MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "52d62dda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "180/180 [==============================] - 250s 1s/step - loss: 1.2670 - accuracy: 0.4772 - val_loss: 1.1097 - val_accuracy: 0.5552\n",
      "Epoch 2/5\n",
      "180/180 [==============================] - 34s 187ms/step - loss: 1.0532 - accuracy: 0.5770 - val_loss: 0.9905 - val_accuracy: 0.6034\n",
      "Epoch 3/5\n",
      "180/180 [==============================] - 31s 171ms/step - loss: 0.9811 - accuracy: 0.6125 - val_loss: 0.9617 - val_accuracy: 0.6308\n",
      "Epoch 4/5\n",
      "180/180 [==============================] - 30s 166ms/step - loss: 0.9225 - accuracy: 0.6370 - val_loss: 0.8994 - val_accuracy: 0.6535\n",
      "Epoch 5/5\n",
      "180/180 [==============================] - 30s 169ms/step - loss: 0.8758 - accuracy: 0.6630 - val_loss: 0.9469 - val_accuracy: 0.6389\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1c3b7908bb0>"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train,epochs=5,validation_data=x_test,steps_per_epoch=len(x_train),validation_steps=len(x_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dd070f8",
   "metadata": {},
   "source": [
    "SAVE THE MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "0563254f",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"flower1.h5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ed26ae",
   "metadata": {},
   "source": [
    "TEST THE MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "b4f1fa55",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import load_model\n",
    "from tensorflow.keras.preprocessing import image \n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "6676ec4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "model=load_model(\"C:/Users/aruna/flowers/flower1.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "e0d89bba",
   "metadata": {},
   "outputs": [],
   "source": [
    "img=image.load_img(\"C:/Users/aruna/flowers/tulip/11746276_de3dec8201.jpg\",target_size=(64,64))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "08c0a85d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=64x64 at 0x1C3AEC404F0>"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "328b5cb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=image.img_to_array(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "5eb9991e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[202.,  94., 206.],\n",
       "        [203., 136., 207.],\n",
       "        [ 73.,  13.,  39.],\n",
       "        ...,\n",
       "        [164.,  42., 129.],\n",
       "        [128.,  42., 113.],\n",
       "        [149.,  42., 112.]],\n",
       "\n",
       "       [[148.,  41., 111.],\n",
       "        [168.,  37., 141.],\n",
       "        [ 41.,  10.,  28.],\n",
       "        ...,\n",
       "        [126.,  15.,  81.],\n",
       "        [112.,  24.,  74.],\n",
       "        [101.,  16.,  57.]],\n",
       "\n",
       "       [[ 81.,   0.,  36.],\n",
       "        [215., 110., 203.],\n",
       "        [182.,  67., 220.],\n",
       "        ...,\n",
       "        [127.,  48., 103.],\n",
       "        [ 85.,  19.,  47.],\n",
       "        [ 77.,   9.,  30.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[  6.,  38.,   0.],\n",
       "        [ 39.,  93.,  33.],\n",
       "        [ 50.,   3.,  19.],\n",
       "        ...,\n",
       "        [ 33.,  20.,  37.],\n",
       "        [ 42., 138.,  12.],\n",
       "        [ 61., 158.,  45.]],\n",
       "\n",
       "       [[  5.,  44.,   0.],\n",
       "        [ 11.,  55.,   4.],\n",
       "        [ 39., 117.,  42.],\n",
       "        ...,\n",
       "        [ 70., 192.,  21.],\n",
       "        [210.,  57., 171.],\n",
       "        [ 31., 147.,  14.]],\n",
       "\n",
       "       [[ 25.,  74.,  27.],\n",
       "        [  7.,  71.,  11.],\n",
       "        [ 40., 108.,  47.],\n",
       "        ...,\n",
       "        [173.,  44., 137.],\n",
       "        [136.,  24., 100.],\n",
       "        [155.,   0., 115.]]], dtype=float32)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "1a255350",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "a8952993",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=np.expand_dims(x,axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "d6c2f02f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "9f887d51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 286ms/step\n"
     ]
    }
   ],
   "source": [
    "pred=model.predict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "cb628865",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.000000e+00, 0.000000e+00, 6.961726e-27, 0.000000e+00,\n",
       "        1.000000e+00]], dtype=float32)"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "dc0a031d",
   "metadata": {},
   "outputs": [],
   "source": [
    "labels=[\"daisy\",\"dandelion\",\"rose\",\"sunflower\",\"tulip\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "ead62b20",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.argmax(pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "4281dc87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'sunflower'"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "29ffb8d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'tulip'"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels[np.argmax(pred)]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
